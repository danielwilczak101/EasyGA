import random
from initialization.chromosome_structure.chromosome import Chromosome as create_chromosome
from initialization.gene_structure.gene import Gene as create_gene
from initialization.population_structure.population import Population
from initialization.chromosome_structure.chromosome import Chromosome

class Survivor_Selection:
    """Survivor selection determines which individuals should be brought to the next generation"""

    def remove_worst(ga, next_population):
        """
        Will bring all but the worst-performing chromosomes from the current generation.
        The exact number of chromosomes removed depends on how many offspring were generated by parent selection.
        """
        iterator = 0
        # While the size of the next population is less than it should be (as determined by the user)
        while len(next_population.get_all_chromosomes()) < ga.population_size:
            # Add the best chromosome from the current population that hasn't already been brought over
            next_population.add_chromosome(ga.population.get_all_chromosomes()[iterator])
            iterator += 1
        return next_population